{"remainingRequest":"/home/david/YouTube_Full-Stack/client/node_modules/babel-loader/lib/index.js!/home/david/YouTube_Full-Stack/client/node_modules/eslint-loader/index.js??ref--13-0!/home/david/YouTube_Full-Stack/client/src/PostService.js","dependencies":[{"path":"/home/david/YouTube_Full-Stack/client/src/PostService.js","mtime":1551461315432},{"path":"/home/david/YouTube_Full-Stack/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/YouTube_Full-Stack/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/david/YouTube_Full-Stack/client/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/home/david/YouTube_Full-Stack/client/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/david/YouTube_Full-Stack/client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Promise from \"/home/david/YouTube_Full-Stack/client/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"/home/david/YouTube_Full-Stack/client/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/david/YouTube_Full-Stack/client/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\nimport axios from 'axios'; //const url ='http://localhost:5000/api/posts/';\n\nvar url = 'http://192.168.2.65:5000/api/posts/';\n\nvar PostService =\n/*#__PURE__*/\nfunction () {\n  function PostService() {\n    _classCallCheck(this, PostService);\n  }\n\n  _createClass(PostService, null, [{\n    key: \"getPosts\",\n    // Get Post\n    value: function getPosts() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var activ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var customer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var Years = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n      //console.log(\"cliente 111: \", customer);\n      //Years = [\"2019\"];\n      return new _Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee(resolve, reject) {\n          var lenghtYearsArray, res, data;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  lenghtYearsArray = Years.length;\n                  _context.next = 4;\n                  return axios.get(url, {\n                    params: {\n                      id: id,\n                      activ: activ,\n                      customer: customer,\n                      Years: Years\n                    }\n                  });\n\n                case 4:\n                  res = _context.sent;\n                  data = res.data; //console.log('DATA1: ', data)           \n\n                  resolve(data.map(function (post) {\n                    return _objectSpread({}, post);\n                  }));\n                  _context.next = 12;\n                  break;\n\n                case 9:\n                  _context.prev = 9;\n                  _context.t0 = _context[\"catch\"](0);\n                  reject(_context.t0);\n\n                case 12:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[0, 9]]);\n        }));\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } // Get Post\n\n  }, {\n    key: \"getMessages\",\n    value: function getMessages(ID) {\n      var howmany = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';\n      //console.log(\"ID: \",ID);\n      //console.log(\"howmany: \",howmany);\n      //Years = [\"2019\"];\n      var url2 = url + 'messages'; //console.log(\"url2\", url2);\n\n      return new _Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee2(resolve, reject) {\n          var res, data;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  _context2.next = 3;\n                  return axios.get(url2, {\n                    params: {\n                      ID: ID,\n                      howmany: howmany\n                    }\n                  });\n\n                case 3:\n                  res = _context2.sent;\n                  data = res.data; //console.log('DATA2 Messages: ', data)           \n\n                  resolve(data.map(function (post) {\n                    return _objectSpread({}, post);\n                  }));\n                  _context2.next = 11;\n                  break;\n\n                case 8:\n                  _context2.prev = 8;\n                  _context2.t0 = _context2[\"catch\"](0);\n                  reject(_context2.t0);\n\n                case 11:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this, [[0, 8]]);\n        }));\n\n        return function (_x3, _x4) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    } // Insert Post\n\n  }, {\n    key: \"insertPost\",\n    value: function insertPost() {\n      var kindofinsert = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var post = arguments.length > 1 ? arguments[1] : undefined;\n      var url2 = '';\n\n      if (kindofinsert === 'insertinfo') {\n        url2 = url + 'insertinfo';\n      } else {\n        url2 = url;\n      }\n\n      return axios.post(url2, {\n        post: post\n      }).then(function (response) {\n        return response.data;\n      }).catch(function (err) {\n        return err;\n      });\n    } // Update Post\n\n  }, {\n    key: \"updatePost\",\n    value: function updatePost(post) {\n      var kindofupdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var url3 = '';\n\n      if (kindofupdate !== 'updateinfo') {\n        url3 = url + 'update';\n      } else {\n        url3 = url + 'updatemessages';\n      } //console.log(\"post: \", post);   \n      //return axios.post(url3,{\n\n\n      var res = axios.post(url3, {\n        post: post\n      }).then(function (response) {\n        return response.data;\n      }).catch(function (err) {\n        return err;\n      }); //console.log('res: ', res)\n\n      return res;\n    } // Delete Post\n\n  }, {\n    key: \"deletePost\",\n    value: function deletePost(id) {\n      var idMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      //console.log(\"id: \", id);\n      //console.log(\"idMessage: \", idMessage);\n      var url3 = url; //console.log('url3: ', url3);\n      //console.log(\"idMessage2: \", idMessage);\n\n      var res = axios.delete(url3, {\n        params: {\n          id: id,\n          idMessage: idMessage\n        }\n      }).then(function (response) {\n        console.log('res1: ', response.data);\n        return response.data;\n      }).catch(function (err) {\n        console.log('res2 err: ', err);\n        return err;\n      });\n    }\n  }]);\n\n  return PostService;\n}();\n\nexport default PostService;",{"version":3,"sources":["/home/david/YouTube_Full-Stack/client/src/PostService.js"],"names":["axios","url","PostService","id","activ","customer","Years","resolve","reject","lenghtYearsArray","length","get","params","res","data","map","post","ID","howmany","url2","kindofinsert","then","response","catch","err","kindofupdate","url3","idMessage","delete","console","log"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\n\r\n//const url ='http://localhost:5000/api/posts/';\r\nlet url ='http://192.168.2.65:5000/api/posts/';\r\n\r\n\r\nclass PostService{\r\n\r\n    // Get Post\r\n    static getPosts(id=false, activ=false, customer=false, Years=[]){\r\n        //console.log(\"cliente 111: \", customer);\r\n        //Years = [\"2019\"];\r\n  \r\n        return new Promise(async (resolve, reject)=> {\r\n            try{\r\n                let lenghtYearsArray = Years.length;\r\n                const res = await axios.get(url, {\r\n                    params: {\r\n                        id: id,\r\n                        activ: activ,\r\n                        customer: customer,\r\n                        Years\r\n                    }\r\n                })\r\n                \r\n                               \r\n                const data = res.data;\r\n                //console.log('DATA1: ', data)           \r\n                resolve(\r\n                    data.map(post =>({\r\n                        ...post\r\n                    })) \r\n                )                \r\n            }   \r\n                catch(err){\r\n                reject(err);\r\n            }\r\n        })\r\n    }\r\n\r\n    // Get Post\r\n    static getMessages(ID, howmany='all'){\r\n        //console.log(\"ID: \",ID);\r\n        //console.log(\"howmany: \",howmany);\r\n        //Years = [\"2019\"];\r\n        let url2 = url + 'messages';\r\n        //console.log(\"url2\", url2);\r\n\r\n        \r\n        return new Promise(async (resolve, reject)=> {\r\n            try{\r\n                //let lenghtYearsArray = Years.length;\r\n                const res = await axios.get(url2, {\r\n                    params: {\r\n                        ID: ID,\r\n                        howmany: howmany\r\n                    }\r\n                })                \r\n                               \r\n                const data = res.data;\r\n                //console.log('DATA2 Messages: ', data)           \r\n                resolve(\r\n                    data.map(post =>({\r\n                        ...post\r\n                    })) \r\n                )                \r\n            }   \r\n                catch(err){\r\n                reject(err);\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n\r\n    // Insert Post\r\n    static insertPost(kindofinsert='', post){\r\n        let url2 = '';\r\n        \r\n        if(kindofinsert === 'insertinfo'){\r\n            url2 = url + 'insertinfo';\r\n        } else {\r\n            url2 = url;\r\n        }\r\n                \r\n        return axios.post(url2,{\r\n            post\r\n        }).then(response =>{\r\n            return response.data;\r\n        }).catch(err =>{\r\n            return err;\r\n        });\r\n        \r\n        \r\n    }\r\n\r\n\r\n    // Update Post\r\n    static updatePost(post, kindofupdate=''){\r\n        let url3 = ''\r\n        if(kindofupdate !== 'updateinfo'){\r\n            url3 = url + 'update';\r\n        } else {\r\n            url3 = url + 'updatemessages';\r\n        }\r\n        //console.log(\"post: \", post);   \r\n\r\n        \r\n        \r\n        //return axios.post(url3,{\r\n        const res = axios.post(url3,{\r\n            post\r\n        }).then(response =>{\r\n            return response.data;\r\n        }).catch(err =>{\r\n            return err;\r\n        });\r\n\r\n        //console.log('res: ', res)\r\n        return res;\r\n        \r\n}\r\n\r\n    // Delete Post\r\n    static deletePost(id, idMessage = '') {\r\n        //console.log(\"id: \", id);\r\n        //console.log(\"idMessage: \", idMessage);\r\n\r\n        let url3 = url;\r\n        //console.log('url3: ', url3);\r\n\r\n        //console.log(\"idMessage2: \", idMessage);\r\n\r\n        const res = axios.delete(url3,{\r\n            params: {\r\n                id: id,\r\n                idMessage: idMessage\r\n            }\r\n        }).then(response =>{\r\n            console.log('res1: ', response.data)\r\n            return response.data;                \r\n        }).catch(err =>{\r\n            console.log('res2 err: ', err)\r\n            return err;\r\n        });\r\n            \r\n    }\r\n}\r\n\r\nexport default PostService;"]}]}